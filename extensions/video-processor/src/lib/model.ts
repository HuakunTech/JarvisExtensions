import { z } from "zod";

export const AudioStream = z.object({
  index: z.number(),
  codec_name: z.string(),
  codec_long_name: z.string(),
  profile: z.string(),
  codec_type: z.string(),
  codec_tag_string: z.string(),
  codec_tag: z.string(),
  sample_fmt: z.string(),
  sample_rate: z.string(),
  channels: z.number(),
  channel_layout: z.string(),
  bits_per_sample: z.number(),
  initial_padding: z.number(),
  id: z.string(),
  r_frame_rate: z.string(),
  avg_frame_rate: z.string(),
  time_base: z.string(),
  start_pts: z.number(),
  start_time: z.string(),
  duration_ts: z.number(),
  duration: z.string(),
  bit_rate: z.string(),
  nb_frames: z.string(),
  extradata_size: z.number(),
  disposition: z.object({
    default: z.number(),
    dub: z.number(),
    original: z.number(),
    comment: z.number(),
    lyrics: z.number(),
    karaoke: z.number(),
    forced: z.number(),
    hearing_impaired: z.number(),
    visual_impaired: z.number(),
    clean_effects: z.number(),
    attached_pic: z.number(),
    timed_thumbnails: z.number(),
    non_diegetic: z.number(),
    captions: z.number(),
    descriptions: z.number(),
    metadata: z.number(),
    dependent: z.number(),
    still_image: z.number(),
  }),
  tags: z.object({
    language: z.string(),
    handler_name: z.string(),
    vendor_id: z.string(),
  }),
});

export const VideoStream = z.object({
  index: z.number().optional(),
  codec_name: z.string().optional(),
  codec_long_name: z.string().optional(),
  profile: z.string().optional(),
  codec_type: z.string().optional(),
  codec_tag_string: z.string().optional(),
  codec_tag: z.string().optional(),
  width: z.number().optional(),
  height: z.number().optional(),
  coded_width: z.number().optional(),
  coded_height: z.number().optional(),
  closed_captions: z.number().optional(),
  film_grain: z.number().optional(),
  has_b_frames: z.number().optional(),
  sample_aspect_ratio: z.string().optional(),
  display_aspect_ratio: z.string().optional(),
  pix_fmt: z.string().optional(),
  level: z.number().optional(),
  color_range: z.string().optional(),
  color_space: z.string().optional(),
  color_transfer: z.string().optional(),
  color_primaries: z.string().optional(),
  chroma_location: z.string().optional(),
  field_order: z.string().optional(),
  refs: z.number().optional(),
  is_avc: z.string().optional(),
  nal_length_size: z.string().optional(),
  id: z.string().optional(),
  r_frame_rate: z.string().optional(),
  avg_frame_rate: z.string().optional(),
  time_base: z.string().optional(),
  start_pts: z.number().optional(),
  start_time: z.string().optional(),
  duration_ts: z.number().optional(),
  duration: z.string().optional(),
  bit_rate: z.string().optional(),
  bits_per_raw_sample: z.string().optional(),
  nb_frames: z.string().optional(),
  extradata_size: z.number().optional(),
  disposition: z.object({
    default: z.number().optional(),
    dub: z.number().optional(),
    original: z.number().optional(),
    comment: z.number().optional(),
    lyrics: z.number().optional(),
    karaoke: z.number().optional(),
    forced: z.number().optional(),
    hearing_impaired: z.number().optional(),
    visual_impaired: z.number().optional(),
    clean_effects: z.number().optional(),
    attached_pic: z.number().optional(),
    timed_thumbnails: z.number().optional(),
    non_diegetic: z.number().optional(),
    captions: z.number().optional(),
    descriptions: z.number().optional(),
    metadata: z.number().optional(),
    dependent: z.number().optional(),
    still_image: z.number().optional(),
  }),
  tags: z.object({
    language: z.string().optional(),
    handler_name: z.string().optional(),
    vendor_id: z.string().optional(),
  }),
});

export type AudioStream = z.infer<typeof AudioStream>;
export type VideoStream = z.infer<typeof VideoStream>;

export const FfprobeFormat = z.object({
  filename: z.string().optional(),
  nb_streams: z.number().optional(),
  nb_programs: z.number().optional(),
  nb_stream_groups: z.number().optional(),
  format_name: z.string().optional(),
  format_long_name: z.string().optional(),
  start_time: z.string().optional(),
  duration: z.string().optional(),
  size: z.string().optional(),
  bit_rate: z.string().optional(),
  probe_score: z.number().optional(),
  tags: z.object({
    major_brand: z.string().optional(),
    minor_version: z.string().optional(),
    compatible_brands: z.string().optional(),
    encoder: z.string().optional(),
  }),
});
export type FfprobeFormat = z.infer<typeof FfprobeFormat>;

export const FFProbeSchema = z.object({
  streams: z.array(z.union([VideoStream, AudioStream])),
  format: FfprobeFormat,
});
export type FFProbeSchema = z.infer<typeof FFProbeSchema>;
